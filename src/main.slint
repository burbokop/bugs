import { Slider, GroupBox, HorizontalBox, VerticalBox } from "std-widgets.slint";

export struct BugInfo  {
    id: int,
    x: float,
    y: float,
    rotation: angle,
    size: float,
    energy_level: float,
    age: percent,
    color: color,
    baby_charge: percent,
}

component Empty {}



export component MainWindow inherits Window {
    pure callback pointer-event(int, length, length);
    pure callback scroll-event(length, length, length, length, bool, bool) -> bool;
    pure callback key-press-event(string) -> bool;
    pure callback key-release-event(string) -> bool;

    in property <image> canvas <=> canvas.source;
    in property <float> fps;
    in property <float> time-speed;

    out property <int> requested-canvas-width: canvas.width / 1phx;
    out property <int> requested-canvas-height: canvas.height / 1phx;

    in property <BugInfo> selected-bug-info;

    public function init_focus() {
        focus-scope.focus()
    }

    title: "The Bugs";
    preferred-width: 800px;
    preferred-height: 600px;

    HorizontalBox {
        padding: 0;

        VerticalBox {
            width: 400px;

            Text {
                font-size: 20px;
                text: "The Bugs Environment";
                horizontal-alignment: center;
            }

            Text {
                font-size: 20px;
                text: "Environment:";
            }

            Text {
                font-size: 14px;
                text: "time speed: \{root.time-speed}";
            }

            Text {
                font-size: 20px;
                text: "Selected bug:";
            }

            Text {
                font-size: 14px;
                text: "id: " + root.selected-bug-info.id;
            }
            Text {
                font-size: 14px;
                text: "position: { \{(root.selected-bug-info.x * 10).round() / 10}, \{(root.selected-bug-info.y * 10).round() / 10} }";
            }
            Text {
                font-size: 14px;
                text: "rotation: " + (root.selected-bug-info.rotation / 1deg).round() + "Â°";
            }
            Text {
                font-size: 14px;
                text: "size: " + root.selected-bug-info.size;
            }
            Text {
                font-size: 14px;
                text: "energy-level: " + (root.selected-bug-info.energy-level * 100).round() / 100;
            }
            Text {
                font-size: 14px;
                text: "age: " + (root.selected-bug-info.age / 1% * 100).round() / 100 + "%";
            }
            Text {
                font-size: 14px;
                color: root.selected-bug-info.color;
                text: "color: {\{root.selected-bug-info.color.alpha}, \{root.selected-bug-info.color.red}, \{root.selected-bug-info.color.green}, \{root.selected-bug-info.color.blue}}";
            }
            Text {
                font-size: 14px;
                text: "baby-charge: " + (root.selected-bug-info.baby-charge / 1% * 100).round() / 100 + "%";
            }

            Empty {}
        }

        canvas := Image {
            touch := TouchArea {
                pointer-event(event) => {
                    if(event.kind == PointerEventKind.up) {
                        root.pointer-event(0, self.mouse-x, self.mouse-y);
                    } else if(event.kind == PointerEventKind.down) {
                        root.pointer-event(1, self.mouse-x, self.mouse-y);
                    } else if(event.kind == PointerEventKind.move) {
                        root.pointer-event(2, self.mouse-x, self.mouse-y);
                    } else if(event.kind == PointerEventKind.cancel) {
                        root.pointer-event(3, self.mouse-x, self.mouse-y);
                    }
                }

                scroll-event(event) => {
                    root.scroll-event(self.mouse-x, self.mouse-y, event.delta-x, event.delta-y, event.modifiers.shift, event.modifiers.control) ? accept : reject
                }

                moved => {
                    if (self.enabled && self.pressed) {
                        // TODO
                    }
                }

                mouse-cursor: self.pressed ? MouseCursor.grabbing : MouseCursor.grab;
            }

            Text {
                x: 0;
                y: 0;
                text: "fps: \{(root.fps * 10).round() / 10}";
            }
        }
    }

    focus-scope := FocusScope {
        enabled: true;

        key-pressed(event) => {
            return root.key-press-event(event.text) ? accept : reject;
        }

        key-released(event) => {
            return root.key-release-event(event.text) ? accept : reject;
        }
    }
}

